
-------------------------------------------

**UDP CLIENT**

#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>
int main(int argc,char* argv[])
{
    struct sockaddr_in server,client;
    if(argc!=2)
    printf("Input format not correct");
    int sockfd=socket(AF_INET,SOCK_DGRAM,0);
    if(sockfd==-1)
    printf("Error in socket();");
       printf("client responding  .....");
    server.sin_family=AF_INET;
    server.sin_addr.s_addr=INADDR_ANY;
    server.sin_port=htons(atoi(argv[1]));
    char buffer[100];
    printf("\n Enter a message to be sent to server: ");
    fgets(buffer,100,stdin);
    if(sendto(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&server,sizeof(server))<0)
    printf("Error in sendto");
    return 0;
}


-------------------------------------------


**UDP SERVER**

#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>
int main(int argc,char* argv[])
{
    struct sockaddr_in server,client;
    
    if(argc!=2)
    printf("Input format not correct");
    int sockfd=socket(AF_INET,SOCK_DGRAM,0);
    if(sockfd==-1)
    printf("Error in socket();");
    printf("server responding  .....");
    server.sin_family=AF_INET;
    server.sin_addr.s_addr=INADDR_ANY;
    server.sin_port=htons(atoi(argv[1]));
    if(bind(sockfd,(struct sockaddr*)&server,sizeof(server))<0)
    printf("Error in blind()! \n");
    char buffer[100];
    socklen_t server_len=sizeof(client);
    printf("server waiting.....");
    if(recvfrom(sockfd,buffer,100,0,(struct sockaddr*)&server,&server_len)<0)
    printf("Error in recvfrom()!");
    printf("\n Got a datagram: %s",buffer);
    return 0;
}

-------------------------------------------

**TCP CLIENT**

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int main(void)
{
    int socket_desc;
    struct sockaddr_in server_addr;
    char server_message[2000], client_message[2000];
    

    memset(server_message,'\0',sizeof(server_message));
    memset(client_message,'\0',sizeof(client_message));
    

    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    
    if(socket_desc < 0){
        printf("Unable to create socket\n");
        return -1;
    }
    
    printf("Socket created successfully\n");
    

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2000);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    

    if(connect(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0){
        printf("Unable to connect\n");
        return -1;
    }
    printf("Connected with server successfully\n");

    printf("Enter message: ");

   scanf("%s",client_message);
    

    if(send(socket_desc, client_message, strlen(client_message), 0) < 0){
        printf("Unable to send message\n");
        return -1;
    }
    

    if(recv(socket_desc, server_message, sizeof(server_message), 0) < 0){
        printf("Error while receiving server's msg\n");
        return -1;
    }
    
    printf("Server's response: %s\n",server_message);
    

  
    return 0;
}


-------------------------------------------

**TCP SERVER**

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int main(void)
{
    int socket_desc, client_sock, client_size;
    struct sockaddr_in server_addr, client_addr;
    char server_message[2000], client_message[2000];
    

    memset(server_message, '\0', sizeof(server_message));
    memset(client_message, '\0', sizeof(client_message));
    
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    
    if(socket_desc < 0){
        printf("Error while creating socket\n");
        return -1;
    }
    printf("Socket created successfully\n");
    

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(2000);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    
  
    if(bind(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr))<0){
        printf("Couldn't bind to the port\n");
        return -1;
    }
    printf("Done with binding\n");
    

    if(listen(socket_desc, 1) < 0){
        printf("Error while listening\n");
        return -1;
    }
    printf("\nListening for incoming connections.....\n");
    

    client_size = sizeof(client_addr);
    client_sock = accept(socket_desc, (struct sockaddr*)&client_addr, &client_size);
    
    if (client_sock < 0){
        printf("Can't accept\n");
        return -1;
    }
    printf("Client connected at IP: %s and port: %i\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
    

    if (recv(client_sock, client_message, sizeof(client_message), 0) < 0){
        printf("Couldn't receive\n");
        return -1;
    }
    printf("Msg from client: %s\n", client_message);
    

    strcpy(server_message, "This is the server's message.");
    
    if (send(client_sock, server_message, strlen(server_message), 0) < 0){
        printf("Can't send\n");
        return -1;
    }
    
 
    
    return 0;
}

-------------------------------------------

**FORK**


#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#include<unistd.h>
#include<sys/wait.h>
#include  <sys/types.h>
#define MAX_COUNT 3
#define BUF_SIZE 100
void main (void)
{
pid_t pid;
int i;
char buf[BUF_SIZE];
fork();
pid = getpid();
for (i=1; i<=MAX_COUNT; i++) {
sprintf(buf, "This line is from pid %d, value = %d\n", pid, i);
write(1, buf, strlen(buf));
}
}


-------------------------------------------

**WAIT**

#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#include<unistd.h>
#include<sys/wait.h>
#include  <sys/types.h>
#define   MAX_COUNT  3
void  main(void)
{
     pid_t   pid1, pid2, pid; 
     int     status;
     int     i;
       printf("pid=%d\n",getpid());
       printf("parent pid=%d\n",getppid());
       pid1=fork();
       
     if (pid1   < 0) 
      {
          printf("Failed to fork process 1\n");
          exit(1);
      }
           else if (pid1 == 0) 
          {    
              printf("##########pid1=%d############",pid1);
           for (i = 1; i <= MAX_COUNT; i++) {
          printf("\n%d child's output, value = %d\n",getpid(), i); 
          }
          }
 else
        {
           if ((pid2 = fork()) < 0) {
          printf("Failed to fork process 2\n");
          exit(1);
          }
     else if (pid2 == 0) 
          {     
           for (i = 1; i <= MAX_COUNT; i++) {
          printf( "%d child's output, value = %d\n",getpid( ), i); 
           }
           }
else
{
     printf("*** Parent enters waiting status .....\n");
        pid = wait(&status);
     printf("*** Parent detects process %d was done ***\n", pid);
      pid = wait(&status);
     printf("*** Parent detects process %d is done ***\n", pid);
     printf("*** Parent exits ***\n");
     exit(0);
}
}

}


-------------------------------------------

**GOBACKN**

#include<stdio.h>
#include<time.h>
#include<stdlib.h>

int main()
{
 int nf,N;
 int tr=0;
 srand(time(NULL));
 printf("Enter the number of frames                                                                                                                                                                                                                      : ");
 scanf("%d",&nf);
 printf("Enter the Window Size : ");
 scanf("%d",&N);
 int i=1;
 while(i<=nf)
 {
     int x=0;
     for(int j=i;j<i+N && j<=nf;j++)
     {
         printf("Sent Frame %d \n", j);
         tr++;
     }
     for(int j=i;j<i+N && j<=nf;j++)
     {
         int flag = rand()%2;
         if(!flag)
             {
                 printf("%d : Acknowledged! \n", j);
                 x++;
             }
         else
             {   printf("Frame %d Not Received \n", j);
                 printf("Retransmitting Window \n");
                 break;
             }
     }
     printf("\n");
     i+=x;
 }
 printf("Total number of transmissions : %d \n", tr);
 return 0;
}


-------------------------------------------

**SELECTIVE REPEAT**

#include<stdio.h>

#include<stdlib.h>

int input(int a[] , int frame_size)
{
    printf("\n Input \n");
    for(int i = 1 ; i <= frame_size ; i++)
    {
   	 printf(" Enter Value For Frame[%d] : " , i);
   	 scanf("%d",&a[i]);
   	 printf("\n");
    }
    printf("\n");
    return 1;
}
int display(int a[] , int frame_size)
{
    printf("\nDisplay \n");
    for(int i = 1 ; i <= frame_size ; i++)
    {
   	 printf(" Frame[%d] : %d " , i , a[i]);
   	 printf("\n");
    }
    printf("\n");
    return 1;
}
int selective_repeat(int frames[] , int window_size , int frame_size)
{
   	 int nt =0;

   	 int k = 0;

   	 int left[10000] = {-1};

		 int i ;

		 for(i = 1 ; i <= frame_size ; i++)                                                                                                                                                                                                                                                                                                                                                                                                                                                              
    	{
   		 int flag = rand() % 2;

   		 if(flag)
   		 {
   			 printf(" Frame[%d] with value %d Acknowledged !!! \n", i , frames[i]);
   			 nt++;
   		 }
   		 else
   		 {
   			 printf(" Frame[%d] with value %d Not Acknowledged !!! \n", i , frames[i]);

   			 left[k++] = frames[i];

   			 nt++;
   		 }
   		 if(i % window_size == 0)
   		 {
   			 for(int x = 0 ; x < k ; x++)
   			 {
   				 printf(" Frame[%d] with value %d Retransmitted \n", x , left[x]);

   				 nt++;

   				 printf(" Frame[%d] with value %d Acknowledged on Second Attempt \n", x , left[x]);

   			 }
   			 k = 0;
   		 }
    	}
   	 for(i = 0 ; i < k ; i++)
   	 {
   	      printf(" Frame[%d] with value %d Retransmitted \n\n", i , left[i]);

   		 nt++;

   		 printf(" Frame[%d] with value %d Acknowledged on Second Attempt \n\n", i , left[i]);
   	 }
   	 printf(" Total Transmissions :  %d \n\n", nt);
		 return 0;
}
int main()
{
   	 int frames[50];

   	 int window_size;

   	 int frame_size;

   	 printf("\n Selective Repeat \n");

		 printf(" Enter Window Size : ");

		 scanf("%d",&window_size);

		 printf(" Enter Number Of Frames To Be Transmitted : ");

		 scanf("%d",&frame_size);

		 input(frames , frame_size);

		 display(frames , frame_size);

		 selective_repeat(frames , window_size , frame_size);

		 return 0;

}


-------------------------------------------

**STOPANDWAIT**


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
int i,j,noframes,x,x1=10,x2;
for(i=0;i<200;i++)
rand();
noframes=rand()/22000;
i=1;
j=1;
noframes = noframes / 22000;
printf("\n number of frames is %d",noframes);
while(noframes>0)
{
printf("\nsending frame %d",i);
srand(x1++); //The srand() function sets the starting point for producing a series of pseudo-random integers
x = rand()%10;
if(x%2 == 0)
{
for (x2=1; x2<2; x2++)
{
printf("waiting for %d seconds\n", x2);
sleep(x2);
printf("Missing Acknowledgement %d",i);
}
printf("\nsending frame %d",i);
srand(x1++);
x = rand()%10;
}
printf("\nack received for frame %d",j);
noframes-=1;
i++;
j++;
}
printf("\n end of stop and wait protocol");
}


-------------------------------------------

**DVR**

#include<stdio.h>
struct node
{
    unsigned dist[20];
    unsigned from[20];
}rt[10];
int main()
{
    int costmat[20][20];
    int nodes,i,j,k,count=0;
    printf("\nEnter the number of nodes : ");
    scanf("%d",&nodes);//Enter the nodes
    printf("\nEnter the cost matrix :\n");
    for(i=0;i<nodes;i++)
    {
        for(j=0;j<nodes;j++)
        {
            scanf("%d",&costmat[i][j]);
            costmat[i][i]=0;
            rt[i].dist[j]=costmat[i][j];//initialise the distance equal to cost matrix
            rt[i].from[j]=j;
        }
    }
        do
        {
            count=0;
            for(i=0;i<nodes;i++)//We choose arbitary vertex k and we calculate the direct distance from the node i to k using the cost matrix
            //and add the distance from k to node j
            for(j=0;j<nodes;j++)
            for(k=0;k<nodes;k++)
                if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j])
                {//We calculate the minimum distance
                    rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
                    rt[i].from[j]=k;
                    count++;
                }
        }while(count!=0);
        for(i=0;i<nodes;i++)
        {
            printf("\n\n For router %d\n",i+1);
            for(j=0;j<nodes;j++)
            {
                printf("\t\nnode %d via %d Distance %d ",j+1,rt[i].from[j]+1,rt[i].dist[j]);
            }
        }
    printf("\n\n");
}
    //getch(); }

-------------------------------------------

**LEAKYBUCKET**


#include<stdio.h>
int main(){
    int incoming, outgoing, buck_size, n, store = 0;
    printf("Enter bucket size :");
    scanf("%d",&buck_size);
    printf("outgoing rate :");
     scanf("%d",&outgoing);
    printf(" no of inputs: ");
     scanf("%d",&n);
 

    while (n != 0) {
        printf("Enter the incoming packet size : ");
        scanf("%d", &incoming);
        printf("Incoming packet size %d\n", incoming);
        if (incoming <= (buck_size - store)){
            store += incoming;
            printf("Bucket buffer size %d out of %d\n", store, buck_size);
        } else {
            printf("Dropped %d no of packets\n", incoming - (buck_size - store));
            printf("Bucket buffer size %d out of %d\n", store, buck_size);
            store = buck_size;
        }
        store = store - outgoing;
        printf("After outgoing %d packets left out of %d in buffer\n", store, buck_size);
        n--;
    }
    return 0;
}

-------------------------------------------
